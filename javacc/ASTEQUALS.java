/* Generated By:JJTree: Do not edit this line. ASTEQUALS.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTEQUALS extends SimpleNode {
  public ASTEQUALS(int id) {
    super(id);
  }

  public ASTEQUALS(JmmParser p, int id) {
    super(p, id);
  }

  @Override
  public void applySemanticAnalysis(Table table) throws Exception {
    SimpleNode lhs = ((SimpleNode) children[0]);
    SimpleNode rhs = ((SimpleNode) children[1]);
    if(table == null) return;

    if(lhs.name != null && (rhs != null && rhs.name == null)){
        if(table.getSymbolType(lhs.name).equals("int")){
            if(rhs.toString().matches("true")){
                throw new Exception("Invalid type.");
            }
        }
        
}
    if(lhs.name != null && rhs.name != null){
      Symbol s = table.getSymbol(lhs.name);
      Symbol s1 = table.getSymbol(rhs.name);
      if(s != null && s1 != null){
        if(!s.getType().equals(s1.getType())){
            throw new Exception("Incompatible types.");
      }
    }
    }

    if(rhs.name != null && rhs.name.matches("[a-zA-Z$_][a-zA-Z0-9$_]*") && !table.getSymbol(rhs.name).isInitialized()){
        throw new Exception("RHS: " + rhs.name + " not initialized");
    }    
    if (lhs.name != null) {
      Symbol s = table.getSymbol(lhs.name);
       if (s != null) {
        rhs.applySemanticAnalysis(table);
        if (!s.isInitialized())
          s.initialize();
        return;
      }
    } else if (lhs instanceof ASTarray) {
      lhs.applySemanticAnalysis(table);
      rhs.applySemanticAnalysis(table);
      return;
    }

    throw new Exception("Left side of an assignment isn't a known variable on line " + ((SimpleNode) children[0]).getLine());
  }
}
/* JavaCC - OriginalChecksum=eed6f6e27cd2ad4a916e9bfe003bd80f (do not edit this line) */
