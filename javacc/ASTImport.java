/* Generated By:JJTree: Do not edit this line. ASTImport.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTImport extends SimpleNode {

    protected String methodName;
    protected String className;
    protected boolean isStatic;

    public ASTImport(int id) {
        super(id);
    }

    public ASTImport(JmmParser p, int id) {
        super(p, id);
    }

    public void createTable(Table table) {
        if (children == null || children.length < 2)
            return;

        SimpleNode lhs = ((SimpleNode) children[0]);
        SimpleNode rhs = ((SimpleNode) children[1]);

        String type = "";
        ASTtype t;
        if (rhs.children == null) {
            type = "void";
        } else {
            t = ((ASTtype) rhs.children[0]);
            type = t.getType();
        }
        Table methodTable = new Table(table, type);
        String func = "";
        func += this.methodName + "(";
        if (lhs.children != null) {
            for (int i = 0; i < lhs.children.length; i++) {
                t = ((ASTtype) lhs.children[i]);
                func += t.getType();
                if (i != lhs.children.length - 1)
                    func += ",";
            }
        }

        func += ")";

        JmmParser.getInstance().addMethod(func, methodTable);
        if (lhs.children != null) {
            for (int i = 0; i < lhs.children.length; ++i) {
                t = ((ASTtype) lhs.children[i]);
                Symbol symbol = new Symbol(t.getType(), "p_" + i, Symbol.Access.parameter);
                symbol.initialize();
                methodTable.addSymbol(symbol);
            }
        }

    }

}
/*
 * JavaCC - OriginalChecksum=303e122c01fb6675d381ddc0e7bf847d (do not edit this
 * line)
 */
