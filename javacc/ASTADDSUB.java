import java.util.Arrays;
import java.util.List;

/* Generated By:JJTree: Do not edit this line. ASTADDSUB.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTADDSUB extends SimpleNode {
  public ASTADDSUB(int id) {
    super(id);
  }

  public ASTADDSUB(JmmParser p, int id) {
    super(p, id);
  }

  public String toString(String prefix) {
      this.print = this.name;
      return prefix + this.print;
  }

  public void applySemanticAnalysis(Table table) throws Exception {
      if (children == null || table == null)
          return;

      SimpleNode lhs = ((SimpleNode) children[0]);
      SimpleNode rhs = ((SimpleNode) children[1]);
     
      Symbol s = table.getSymbol(lhs.name);
      Symbol s1 = table.getSymbol(rhs.name);

      if(s != null){
        if(!s.isInitialized()) 
            throw new Exception(" Variable " + s + " not Initialized.");
      }
      if(s1 != null){
        if(!s1.isInitialized()) 
            throw new Exception(" Variable " + s1 + " not Initialized.");
        }

    if(s != null && s1 != null){
        if(!this.compatibleTypes(s.getType(), s1.getType())) 
            throw new Exception("Incompatible types for binary operation.");
    }

      if (print.equals("extends")) {
          extend = ((SimpleNode) children[0]).getName();
      }

      for (int i = 0; i < children.length; i++) {
          ((SimpleNode) children[i]).applySemanticAnalysis(table);
      }
  }

  public boolean compatibleTypes(String type1, String type2){
    String[] t = {"int", "double", "float", "long", "short"};
    List<String> types = Arrays.asList(t);
    return types.contains(type1) && types.contains(type2);
  }

}
/* JavaCC - OriginalChecksum=aed7f5ea421f9aaa07b987618bcbe700 (do not edit this line) */
