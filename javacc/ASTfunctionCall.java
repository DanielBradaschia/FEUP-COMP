/* Generated By:JJTree: Do not edit this line. ASTfunctionCall.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */

public class ASTfunctionCall extends SimpleNode {
  private String methodName;

  public ASTfunctionCall(int id) {
    super(id);
  }

  public ASTfunctionCall(JmmParser p, int id) {
    super(p, id);
  }

  public String getMethodName() {
    return methodName;
  }

  public void applySemanticAnalysis(Table table) throws Exception {
    methodName = ((SimpleNode) children[0]).name + "(";


    if (children.length == 1) {
      methodName += ")";

      if (extend == null && !JmmParser.getInstance().containsMethod(methodName)) {
        throw new Exception("Not a valid method on line " + this.getLine());
        
      }

      if(JmmParser.getInstance().getMethods().get(methodName) == null)
        throw new Exception("Function not found");
      return;
    }

    Node[] parameters = ((SimpleNode) children[1]).children;
    
    for (int i = 0; i < parameters.length; i++) {
      methodName += getParameterType(((SimpleNode) parameters[i]), table);
      if(i != parameters.length-1){
          methodName += ",";
      }
    }

    methodName += ")";


    if (extend == null && !JmmParser.getInstance().containsMethod(methodName)) {
      throw new Exception("Not a valid method on line " + this.getLine());
      
    }

    if (JmmParser.getInstance().getMethods().get(methodName) == null)
        throw new Exception("Function " + methodName +" not found");

    return;
  }

  public String getParameterType(SimpleNode parameter, Table table) throws Exception {
    if (parameter.name != null) {
        
        Symbol s = table.getSymbol(parameter.name);
      if (s != null) {
        if (!s.isInitialized()) {
          throw new Exception("Variable " + parameter.name + " not initialized on line " + parameter.getLine());
          
        }

        return s.getType();
      }

      if (parameter instanceof ASTMULDIV || parameter instanceof ASTADDSUB) {
        parameter.applySemanticAnalysis(table);
        return "int";
      }

      try {
        Integer.parseInt(parameter.name);
        return "int";
      } catch (NumberFormatException | NullPointerException e) {
        throw new Exception("Parameters don't match method definition on line " + this.getLine());
        
      }
    }

    if (parameter instanceof ASTDOT) {
      parameter.applySemanticAnalysis(table);
      SimpleNode var = (SimpleNode) parameter.children[0];
      SimpleNode rhs = (SimpleNode) parameter.children[1];
      Symbol s = table.getSymbol(var.name);
      if (rhs instanceof ASTfunctionCall && (s != null || var instanceof ASTNEW)) {
        String fName = ((SimpleNode) rhs.children[0]).name + "(";
        if (rhs.children.length > 1) {
          Node[] parameters = ((SimpleNode) rhs.children[1]).children;
          for (int i = 0; i < parameters.length; i++) {
            fName += getParameterType(((SimpleNode) parameters[i]), table);
            if(i < parameters.length-1)
                fName += ",";
          }
        }
        fName += ")";
        if (JmmParser.getInstance().containsMethod(fName)) {
          return JmmParser.getInstance().getMethod(fName).getType();
        }
        throw new Exception("Unknown method " + fName + "on line " + parameter.getLine());
      }
      return "int";
    }

    if (parameter instanceof ASTTRUE || parameter instanceof ASTFALSE || parameter instanceof ASTCOMMERCIALE
        || parameter instanceof ASTMINOR) {
      parameter.applySemanticAnalysis(table);
      return "boolean";
    }

    if (parameter instanceof ASTarray) {
      parameter.applySemanticAnalysis(table);
      return "int";
    }

    if (parameter instanceof ASTNEW) {
      SimpleNode type = (SimpleNode) parameter.children[0];
      if (type instanceof ASTarray)
        return "int[]";
      return type.name;
    }

    throw new Exception("Parameters don't match method definition on line " + this.getLine());
    
  }

  public void applySemanticAnalysisOnParameters(Table table) throws Exception {
    Node[] parameters;

    if (children.length > 1)
      parameters = ((SimpleNode) children[1]).children;
    else
      return;

    for (int i = 0; i < parameters.length; i++) {
      if (parameters[i] instanceof ASTDOT)
        ((ASTDOT) parameters[i]).applySemanticAnalysis(table);
    }

    return;
  }
}
/* JavaCC - OriginalChecksum=90fddc29584edb63ad277064260b7da7 (do not edit this line) */
